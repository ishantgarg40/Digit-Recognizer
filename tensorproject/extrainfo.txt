 mnist = tf.keras.datasets.mnist
# (x_train, y_train), (x_test, y_test) = mnist.load_data()
# x_train, x_test = x_train/255.0, x_test/255.0
# x_train, x_test = numpy.expand_dims(x_train, axis=-1), numpy.expand_dims(x_test, axis=-1)
#
# inputs = kl.Input(shape=(28, 28, 1))
# c = kl.Conv2D(32, (3, 3), padding="valid", activation=tf.nn.relu)(inputs)
# m = kl.MaxPool2D((2, 2), (2, 2))(c)
# c = kl.Conv2D(64, (3, 3), padding="valid", activation=tf.nn.relu)(m)
# m = kl.MaxPool2D((2, 2), (2, 2))(c)
# f = kl.Flatten()(m)
# outputs = kl.Dense(10, activation=tf.nn.softmax)(f)
#
# model = km.Model(inputs, outputs)
# model.summary()
# model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
# #
# model.fit(x_train, y_train, epochs=5)
# loss, acc = model.evaluate(x_test, y_test)
# print(f"Test Loss: {loss} and Test Acc: {acc}")

# model.save('model.h5')